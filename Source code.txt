#######################################################################################
				The first solution 
#######################################################################################

#include <iostream>
using namespace std;

int first_solution(int a[], int b[], int n)
{
	int  maxArea = 0, rectangles = 0;
	
	for (int i = 0; i < n; i++)
	{
	    int count = 0, area = 0;
		for (int j = 0; j < n; j++)
		{
			if(a[i] == a[j] || a[i] == b[j])
			{
			    area += a[j]*b[j];
			    count++;
			}
		}
		if(area > maxArea)
		{
		    rectangles = count;
		}
	}
	return rectangles;
}
int main()
{
	const int n = 4;
	int rectangles ;
	int a[n]= {1,3,4,4};
	int b[n]= { 1,3,2,2 };
	
	rectangles = first_solution(a,b,n);
	cout << "The maximum number of rectangles is : " << rectangles << endl;
	return 0;
}



##############################################################################################
				The second solution
##############################################################################################

#include <iostream> 

using namespace std;

void getMax(int a[], int b[], int n, int i, int j, int c[]);

int second_solution(int a[], int b[], int n, int i=0, int rectangles=0)
{
	if( i < n)
    {
        int c[2]={0,0};
        getMax(a, b, n, i, 0, c);
        if(c[0] > 0) rectangles = c[1];
        second_solution(a, b, n, i+1, rectangles);
    }
    else return rectangles;
}

void getMax(int a[], int b[], int n, int i, int j, int c[])
{
    if(j < n)
    {
        if(a[i] == a[j] || a[i] == b[j])
			{
			    c[0] += a[j]*b[j];
			    c[1]++;
			}
        getMax(a, b, n, i, j+1 , c);
    }
}

int main()
{
	const int n = 3;
	int rectangles ;
	int a[n]= { 1,1,5};
	int b[n]= { 1,1,2 };

	rectangles = second_solution(a,b,n,0,0);
	cout << "The maximum number of rectangles is : " << rectangles << endl;
	return 0;
}
